name: Previews
description: Github Action used to deploy preview environments, to Google Cloud Run.
author: "@joggrdocs"
branding:
  icon: 'aperture'
  color: 'blue'
inputs:
  #------------------
  # Deployment
  #------------------

  name:
    description: "The name of the service (must be unique) to be deployed."
    required: true
  port:
    description: "The port that the application will run on in the container."
    required: false
    default: "8080"
  env_vars:
    description: "List of environment variables that will be injected during runtime, each on a new line."
    required: false
  gcp_region:
    description: "The GCP Region where the service will be deployed."
    required: true
    default: "us-central1"
  gcp_project_id:
    description: "The GCP Project ID where the service will be deployed."
    required: true
  gcp_service_account_key:
    description: "The Service Account JSON Key used to push images to the GCP Artifact Registry."
    required: true
  gcp_artifact_registry:
    description: "The Artifact Registry name, you can override for custom names (i.e. us-docker.pkg.dev/able-sailor-21423/acme)"
    required: true
  
  #------------------
  # Pull Request Integration
  #------------------

  github_token:
    description: "Github Token, pass in the `secrets.GITHUB_TOKEN`."
    required: true

  #------------------
  # Docker
  #------------------

  dockerfile:
    description: "The Dockerfile name, you can override for custom names (i.e. DevDockerfile)"
    required: true
    default: "Dockerfile"
  dockerfile_directory:
    description: "Directory where the DockerFile is located."
    required: true
    default: "."
  dockerfile_build_args:
    description: "Comma separated list of arguments that will be injected during the build (i.e. FOO=bar,FOOBAR=foo)"
    required: false
outputs:
  url:
    description: "The preview URL for the running application"
    value: ${{ steps.deploy.outputs.url }}
runs:
  using: "composite"
  steps:

    - name: 'üí¨ Add Deployment in progress to Pull Request'
      uses: actions/github-script@v5
      with:
        github-token: ${{ inputs.github_token }}
        env:
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.url }}
        script: |
          (async () => {
            try {
              const { number: prNumber, repository } = context.payload;
              
              const { data: pullRequest } = await github.rest.pulls.get({
                repo: repository.name,
                owner: repository.owner.login,
                pull_number: prNumber,
              });

              const body = `
                ${pullRequest.body}
                
                <!-- previews -->
                ---
                :warning: Preview in progress :warning:
                `.trim();
              
              await github.rest.pulls.update({
                repo: repository.name,
                owner: repository.owner.login,
                pull_number: prNumber,
                body: body,
              });
            } catch (error) {
              core.setFailed(error);
            }
          })();

    - name: '#Ô∏è‚É£ Extract Pull Request #'
      uses: actions/github-script@v7
      id: pr-number
      with:
        result-encoding: string
        script: |
          if (!context.payload.number) {
            core.setFailed('No PR number found, you can only run Previews on Pull Requests.');
          }

          return context.payload;

    - name: '‚òÅÔ∏è Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        project_id: ${{ inputs.gcp_project_id }}
        credentials_json: '${{ inputs.gcp_service_account_key }}'

    - name: '‚òÅÔ∏è Setup Cloud SDK'
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ inputs.gcp_project_id }}
    
    - name: 'üê≥ Authorize Docker push'
      shell: bash
      run: gcloud auth configure-docker ${{ inputs.gcp_artifact_registry }} --quiet

    - name: 'üê≥ Build and Push Container'
      shell: bash
      run: |-
        docker buildx build -t ${{ inputs.gcp_artifact_registry }}/${{ inputs.name }}:${{ github.sha }} .
        docker push ${{ inputs.gcp_artifact_registry }}/${{ inputs.name }}:${{ github.sha }}

    - name: 'üöÄ Deploy to Cloud Run'
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ inputs.name }}-${{ github.sha }}
        image: ${{ inputs.gcp_artifact_registry }}/${{ inputs.cloud_run_service }}:${{ inputs.release_name }}
        region: ${{ inputs.gcp_region }}
        suffix: pr${{ steps.pr-number.outputs.result }}-${{ github.sha }}
        env_vars: |
          PORT=${{ inputs.port }}
          ${{ inputs.env_vars }}

    - name: 'üí¨ Add Deployment URL to Pull Request'
      uses: actions/github-script@v5
      with:
        github-token: ${{ inputs.github_token }}
        env:
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.url }}
        script: |
          (async () => {
            try {
              const { number: prNumber, repository } = context.payload;
              
              const { data: pullRequest } = await github.rest.pulls.get({
                repo: repository.name,
                owner: repository.owner.login,
                pull_number: prNumber,
              });

              const body = `
                ${pullRequest.body.split('<!-- previews -->')[0]}
                
                <!-- previews -->
                ---
                :rocket: Preview deployed: ${process.env.DEPLOYMENT_URL}Ô∏è
                `.trim();
              
              await github.rest.pulls.update({
                repo: repository.name,
                owner: repository.owner.login,
                pull_number: prNumber,
                body: body,
              });
            } catch (error) {
              core.setFailed(error);
            }
          })();
          